model Discount {
  id                String       @id @default(uuid())
  code              String       @unique
  description       String?
  discountType      DiscountType
  amount            Int
  applicableTo      ApplicableTo
  startAt           DateTime
  endAt             DateTime
  usageLimit        Int?
  perUserUsageLimit Int? // unlimited if NULL
  roles             Role[]
  courses           Course[]     @relation("DiscountCourses")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentTransaction {
  id               Int           @id @default(autoincrement())
  userId           String
  courseId         String?
  contentId        String?
  amount           Int
  paymentType      PaymentType   @default(CONTENT_RENTAL)
  rentValidityDays Int?
  discountId       String?
  couponCode       String?
  status           PaymentStatus @default(PENDING)
  paymentDate      DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user     Profile   @relation(fields: [userId], references: [id])
  course   Course?   @relation(fields: [courseId], references: [id])
  content  Content?  @relation(fields: [contentId], references: [id])
  discount Discount? @relation(fields: [discountId], references: [id])
}

model DiscountUsage {
  id         String   @id @default(uuid())
  discountId String
  userId     String
  usedAt     DateTime @default(now())

  user     Profile  @relation(fields: [userId], references: [id])
  discount Discount @relation(fields: [discountId], references: [id])
}
