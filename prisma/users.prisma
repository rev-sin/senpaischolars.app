model Onboarding {
  id        Int      @id @default(autoincrement())
  email     String
  password  String
  otp       Int
  createdAt DateTime
  updatedAt DateTime
}

model Profile {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String?
  oAuthProvider   String
  oAuthProviderId String
  fullName        String
  role            Role     @default(SCHOOL_STUDENT)
  disableDRM      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Bookmarks          Bookmarks[]
  Certificate        Certificate[]
  CoursePurchases    UserCoursePurchases[]
  ContentPurchases   UserContentPurchases[]
  PaymentTransaction PaymentTransaction[]
  VideoProgress      VideoProgress[]
  Favourites         Favourites[]
}

model Bookmarks {
  id        Int      @id @default(autoincrement())
  userId    String
  contentId String
  createdAt DateTime @default(now())

  user    Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id])

  @@unique([userId, contentId])
}

model UserCoursePurchases {
  userId       String
  courseId     String
  registeredAt DateTime @default(now())
  validTill    DateTime

  user   Profile @relation(fields: [userId], references: [id])
  course Course  @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model UserContentPurchases {
  userId       String
  contentId    String
  registeredAt DateTime @default(now())
  validTill    DateTime

  user    Profile @relation(fields: [userId], references: [id])
  content Content @relation(fields: [contentId], references: [id])

  @@id([userId, contentId])
}

model VideoProgress {
  id               Int      @id @default(autoincrement())
  userId           String
  contentId        String
  currentTimestamp Int
  markAsCompleted  Boolean  @default(false)
  updatedAt        DateTime @default(now()) @updatedAt

  user    Profile @relation(fields: [userId], references: [id])
  content Content @relation(fields: [contentId], references: [id])

  @@unique([contentId, userId])
}
